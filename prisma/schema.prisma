// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TwitterMonitor {
  id            String         @id @default(cuid())
  username      String         @unique
  chatId        String
  lastCheckedAt DateTime       @default(now())
  tweets        TweetRecord[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TweetRecord {
  id             String        @id
  twitterMonitor TwitterMonitor @relation(fields: [monitorId], references: [id])
  monitorId      String
  text           String
  createdAt      DateTime
  notifiedAt     DateTime      @default(now())
  metrics        Json          // For storing retweet_count, like_count, etc.
  mediaUrls      String[]      // For storing URLs of any media attached to the tweet
}

// Discord-specific models for Discord bot integration
model DiscordChannelMonitor {
  id              String                    @id @default(cuid())
  guildId         String                    // Discord server ID
  channelId       String                    // Discord channel ID
  channelName     String
  guildName       String
  isActive        Boolean                   @default(true)
  lastCheckedAt   DateTime                  @default(now())
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  subscribers     DiscordSubscription[]
  messages        DiscordMessageRecord[]

  @@unique([guildId, channelId])
}

model DiscordSubscription {
  id                String                   @id @default(cuid())
  discordUserId     String                   // Discord user ID who created the subscription
  discordUsername   String                   // Discord username
  telegramUsername  String                   // Telegram username to send notifications to
  telegramChatId    String?                  // Telegram chat ID (optional, can be looked up)
  isActive          Boolean                  @default(true)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  
  // Relationship to monitored channel
  channelMonitor    DiscordChannelMonitor    @relation(fields: [channelMonitorId], references: [id], onDelete: Cascade)
  channelMonitorId  String

  @@unique([discordUserId, channelMonitorId])
}

model DiscordMessageRecord {
  id                 String                 @id // Discord message ID
  channelMonitor     DiscordChannelMonitor  @relation(fields: [channelMonitorId], references: [id], onDelete: Cascade)
  channelMonitorId   String
  authorId           String                 // Discord author ID
  authorUsername     String                 // Discord author username
  content            String                 // Message content
  attachments        Json                   // Message attachments (URLs, etc.)
  embeds             Json                   // Message embeds
  createdAt          DateTime               // When the message was created on Discord
  notifiedAt         DateTime               @default(now()) // When we processed/notified about this message
  notificationsSent  Int                    @default(0) // Count of notifications sent for this message
}

// Discord Events to Calendar Sync Models
model DiscordEventMonitor {
  id              String                        @id @default(cuid())
  guildId         String                        // Discord server ID
  guildName       String
  isActive        Boolean                       @default(true)
  lastCheckedAt   DateTime                      @default(now())
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  subscribers     DiscordEventSubscription[]
  events          DiscordEventRecord[]

  @@unique([guildId])
}

model DiscordEventSubscription {
  id                    String                   @id @default(cuid())
  discordUserId         String                   // Discord user ID who created the subscription
  discordUsername       String                   // Discord username
  telegramUsername      String                   // Telegram username
  telegramChatId        String?                  // Telegram chat ID
  googleCalendarId      String?                  // Google Calendar ID to sync to
  googleAccessToken     String?                  // Google OAuth access token
  googleRefreshToken    String?                  // Google OAuth refresh token
  isActive              Boolean                  @default(true)
  syncToCalendar        Boolean                  @default(true)
  sendNotifications     Boolean                  @default(true)
  reminderMinutes       Int                      @default(30) // Minutes before event to send reminder
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  // Relationship to event monitor
  eventMonitor          DiscordEventMonitor      @relation(fields: [eventMonitorId], references: [id], onDelete: Cascade)
  eventMonitorId        String

  @@unique([discordUserId, eventMonitorId])
}

model DiscordEventRecord {
  id                    String                   @id // Discord event ID
  eventMonitor          DiscordEventMonitor      @relation(fields: [eventMonitorId], references: [id], onDelete: Cascade)
  eventMonitorId        String
  name                  String                   // Event name
  description           String?                  // Event description
  scheduledStartTime    DateTime                 // When the event is scheduled to start
  scheduledEndTime      DateTime?                // When the event is scheduled to end
  location              String?                  // Event location
  creatorId             String                   // Discord user ID who created the event
  creatorUsername       String                   // Discord username of creator
  eventType             String                   // STAGE_INSTANCE, VOICE, EXTERNAL
  status                String                   // SCHEDULED, ACTIVE, COMPLETED, CANCELLED
  coverImage            String?                  // Event cover image URL
  participantCount      Int                      @default(0)
  calendarEventId       String?                  // Google Calendar event ID if synced
  discordCreatedAt      DateTime                 // When the event was created on Discord
  notifiedAt            DateTime                 @default(now()) // When we processed this event
  lastSyncedAt          DateTime?                // Last time this was synced to calendar
  notificationsSent     Int                      @default(0)
  
  @@unique([id])
}

model TokenMonitor {
  id            String         @id @default(cuid())
  token         String        
  chatId        String        // Telegram chat ID
  targetPrice   Float?        // Optional target price for alerts
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([chatId, token])  // Each user can monitor a token only once
}
